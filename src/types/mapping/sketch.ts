export interface SketchOptions {
  enableToggle: boolean;  // Enable interactive toggle features
  enableAnnotations: boolean;  // Enable annotation support
  enableRoomDetection: boolean;  // Enable automatic room detection
  enableLabels: boolean;  // Enable automatic labeling
  calibrateAltitude: number;  // Altitude calibration offset
  realTime: boolean;  // Enable real-time updates
}

export interface Point3D {
  x: number;
  y: number;
  z: number;
}

export interface Point2D {
  x: number;
  y: number;
}

export interface Annotation {
  id: string;
  type: 'text' | 'arrow' | 'dimension' | 'marker';
  position: Point2D | Point3D;
  content: string;
  style?: {
    color?: string;
    fontSize?: number;
    opacity?: number;
    [key: string]: any;
  };
  metadata?: Record<string, any>;
}

export interface RoomLabel {
  id: string;
  roomId: string;
  position: Point2D;
  text: string;
  type: 'name' | 'number' | 'area' | 'custom';
  metadata?: {
    autoGenerated?: boolean;
    confidence?: number;
    source?: string;
    [key: string]: any;
  };
}

export interface Dimension {
  id: string;
  start: Point2D | Point3D;
  end: Point2D | Point3D;
  value: number;
  unit: 'meters' | 'feet';
  type: 'linear' | 'angular' | 'area';
  style?: {
    color?: string;
    lineStyle?: 'solid' | 'dashed';
    arrowStyle?: 'single' | 'double';
    [key: string]: any;
  };
}

export interface Layer {
  id: string;
  name: string;
  type: 'walls' | 'doors' | 'windows' | 'furniture' | 'annotations' | 'dimensions' | 'labels';
  visible: boolean;
  locked: boolean;
  opacity: number;
  style?: Record<string, any>;
  data: any[];
}

export interface Sketch2D {
  id: string;
  floorLevel: number;
  viewBox: {
    minX: number;
    minY: number;
    width: number;
    height: number;
  };
  layers: Layer[];
  scale: number;  // pixels per meter
  rotation: number;  // degrees
  metadata: {
    generatedAt: number;
    source: string;
    version: string;
    [key: string]: any;
  };
}

export interface Model3D {
  id: string;
  vertices: Point3D[];
  faces: number[][];  // Indices into vertices array
  normals: Point3D[];
  textureCoords?: Point2D[];
  materials?: {
    [key: string]: {
      color?: [number, number, number];
      texture?: string;
      opacity?: number;
      metallic?: number;
      roughness?: number;
      [key: string]: any;
    };
  };
  metadata: {
    generatedAt: number;
    source: string;
    version: string;
    boundingBox: {
      min: Point3D;
      max: Point3D;
    };
    [key: string]: any;
  };
}

export interface SketchGenerationResult {
  sketch2D?: Sketch2D;
  model3D?: Model3D;
  annotations: Annotation[];
  labels: RoomLabel[];
  dimensions: Dimension[];
  errors: Array<{
    code: string;
    message: string;
    severity: 'error' | 'warning' | 'info';
    details?: Record<string, any>;
  }>;
  metadata: {
    processingTime: number;
    pointCount: number;
    roomCount: number;
    floorCount: number;
    accuracy: number;
    [key: string]: any;
  };
}

export interface SketchUpdateEvent {
  type: 'sketch2D' | 'model3D' | 'annotation' | 'label' | 'dimension';
  action: 'add' | 'update' | 'remove';
  data: any;
  timestamp: number;
}

export interface ProgressUpdate {
  stage: string;
  progress: number;  // 0-100
  message?: string;
  details?: Record<string, any>;
}

export type ProgressCallback = (update: ProgressUpdate) => void;
export type UpdateCallback = (event: SketchUpdateEvent) => void;
