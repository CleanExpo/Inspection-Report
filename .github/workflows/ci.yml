name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Type check
        run: npm run type-check || true
        
      - name: Lint
        run: npm run lint
        
      - name: Test
        run: npm run test
        
  build:
    name: Build
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: .next
          
  quality:
    name: Quality Checks
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
      - name: Check bundle size
        run: npm run analyze || true
        
      - name: Run security audit
        run: npm audit
        
  preview:
    name: Preview Deployment
    if: github.event_name == 'pull_request'
    needs: [validate, build, quality]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .next
          
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod'
          
  deploy:
    name: Production Deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [validate, build, quality]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build
          path: .next
          
      - name: Configure environment
        run: |
          echo "NEXT_PUBLIC_API_URL=${{ secrets.PROD_API_URL }}" >> .env.production
          echo "NEXT_PUBLIC_ENVIRONMENT=production" >> .env.production
          
      - name: Deploy to production
        id: deploy
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod'
          
      - name: Store deployment URL
        run: |
          echo "DEPLOYMENT_URL=${{ steps.deploy.outputs.preview-url }}" >> $GITHUB_ENV
          echo "DEPLOYMENT_ID=${{ steps.deploy.outputs.deployment-id }}" >> $GITHUB_ENV
          
      - name: Verify deployment
        run: |
          # Wait for deployment to be ready
          timeout=300
          elapsed=0
          until curl --output /dev/null --silent --head --fail "$DEPLOYMENT_URL"; do
            if [ $elapsed -ge $timeout ]; then
              echo "Deployment verification timed out"
              exit 1
            fi
            sleep 10
            elapsed=$((elapsed+10))
            echo "Waiting for deployment to be ready... ($elapsed seconds)"
          done
          
      - name: Setup monitoring
        run: |
          # Configure New Relic monitoring
          curl -X POST 'https://api.newrelic.com/v2/applications/deploy' \
            -H "X-Api-Key: ${{ secrets.NEW_RELIC_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"deployment\": {
                \"revision\": \"${{ github.sha }}\",
                \"changelog\": \"${{ github.event.head_commit.message }}\",
                \"description\": \"Deployed to production\",
                \"user\": \"${{ github.actor }}\"
              }
            }"
            
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          text: |
            Deployment URL: ${{ env.DEPLOYMENT_URL }}
            Deployment ID: ${{ env.DEPLOYMENT_ID }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
        
  rollback:
    name: Rollback on Failure
    needs: deploy
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Rollback deployment
        run: |
          curl -X POST "https://api.vercel.com/v1/deployments/${{ env.DEPLOYMENT_ID }}/rollback" \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            -H "Content-Type: application/json"
            
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          text: |
            ⚠️ Deployment failed - Rolling back to previous version
            Failed deployment: ${{ env.DEPLOYMENT_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
